package com.ast

import androidx.test.ext.junit.runners.AndroidJUnit4
import com.ast.aes.AesKeyType
import com.ast.aes.AstAes
import com.ast.aes.Cipher
import org.junit.Assert
import org.junit.Test
import org.junit.runner.RunWith

@RunWith(AndroidJUnit4::class)
class AesTest {

    @Test
    fun keyGenerationTest() {
        val keyCipherPair = arrayOf(
            AesKeyType.L_128 to Cipher.CBC_128,
            AesKeyType.L_192 to Cipher.CBC_192,
            AesKeyType.L_256 to Cipher.CBC_256
        )
        keyCipherPair.forEach {
            val aesKeyGenResult = AstAes.generateKey(it.first)
            assert(aesKeyGenResult.iv.isNotEmpty() && aesKeyGenResult.key.isNotEmpty())
        }
    }

    @Test
    fun complexTest() {
        val keyCipherPair = arrayOf(
            AesKeyType.L_128 to Cipher.CBC_128,
            AesKeyType.L_192 to Cipher.CBC_192,
            AesKeyType.L_256 to Cipher.CBC_256
        )
        val messages = arrayOf(
            "",
            "1",
            "%^#*&*$!764981798^&!^&*$^!&*^&$$",
            "斯会文 社 ═╬ ╬═ ۩۞۩ ★★★ ▀▄",
            "๏̯͡๏ 斯坦尼斯会文 社 ═╬ ╬═ ۩۞۩ ★★★ ▀▄",
            "AAAAAAAAAAAAAAAAAAAAAAAAAADSDADADAD***************************AAAAAAAAAAAAAAAAAAAAAAAAAAADSDADADAD******************9",

        )
        keyCipherPair.forEach { keyCipher ->
            messages.forEach { message ->
                val isSame = isAesCryptoResultsSame(message, keyCipher.second, keyCipher.first)
                Assert.assertTrue(isSame)
            }
        }
    }

    private fun isAesCryptoResultsSame(
        testMessage: String,
        cipher: Cipher,
        keyType: AesKeyType
    ): Boolean {
        val aesKeyGenResult = AstAes.generateKey(keyType)
        val encryptedMessage = AstAes.encryptMessage(
            cipher,
            aesKeyGenResult.key,
            aesKeyGenResult.iv,
            testMessage
        )
        val decryptedMessage = AstAes.decryptMessage(
            cipher,
            aesKeyGenResult.key,
            aesKeyGenResult.iv,
            encryptedMessage
        )
        return decryptedMessage == testMessage
    }
}